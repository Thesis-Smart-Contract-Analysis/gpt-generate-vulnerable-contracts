{
  "id": "chatcmpl-9VGMAXebHlknNL0NVeh0SYHHupvKV",
  "object": "chat.completion",
  "created": 1717238070,
  "model": "gpt-3.5-turbo-0125",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Below is a vulnerable smart contract that has the \"Hiding Malicious Code with External Contract\" vulnerability:\n\n```solidity\npragma solidity ^0.8.0;\n\ninterface MaliciousContract {\n    function stealFunds(address _to, uint _amount) external;\n}\n\ncontract VulnerableContract {\n    MaliciousContract public maliciousContract;\n\n    constructor(address _maliciousContractAddress) {\n        maliciousContract = MaliciousContract(_maliciousContractAddress);\n    }\n\n    function transferFunds(address _to, uint _amount) public {\n        maliciousContract.stealFunds(_to, _amount);\n    }\n}\n```\n\nIn this vulnerable contract, the `VulnerableContract` interacts with an external contract `MaliciousContract` through an interface. The `transferFunds` function in `VulnerableContract` calls the `stealFunds` function of the `MaliciousContract`, which can potentially execute malicious code to steal funds or perform unauthorized actions.\n\n### Remediation:\nTo mitigate the \"Hiding Malicious Code with External Contract\" vulnerability, you can follow these remediation steps:\n\n1. **Use Trusted Contracts**: Only interact with contracts that are trusted and audited. Avoid interacting with external contracts that are not verified or could potentially contain malicious code.\n\n2. **Implement Access Control**: Implement access control mechanisms to restrict which addresses or contracts can call sensitive functions in your contract. This can prevent unauthorized contracts from calling critical functions.\n\n3. **Code Review and Auditing**: Conduct thorough code reviews and security audits to identify and address any vulnerabilities in the smart contract code, especially when interacting with external contracts.\n\n4. **Use Events for Transparency**: Emit events for critical actions in the contract to provide transparency and allow external monitoring of contract activities. This can help detect any unexpected behavior caused by external contract interactions.\n\nBy following these remediation steps, you can enhance the security of your smart contract and reduce the risk of falling victim to malicious code hidden in external contracts."
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 8356,
    "completion_tokens": 397,
    "total_tokens": 8753
  },
  "system_fingerprint": null,
  "query": "Generate a smart contract that has Hiding Malicious Code with External Contract vulnerability and suggest remediation for the vulnerability.",
  "kb": "Use the below information to do the task\n# Function or State Variable Default Visibility\n\n## M\u00f4 t\u1ea3\n\nTr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb (visibility) m\u1eb7c \u0111\u1ecbnh c\u1ee7a c\u00e1c h\u00e0m l\u00e0 `public`. Vi\u1ec7c kh\u00f4ng khai b\u00e1o tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh c\u00f3 th\u1ec3 g\u00e2y ra c\u00e1c h\u00e0nh vi kh\u00f4ng mong mu\u1ed1n trong smart contract. V\u00ed d\u1ee5, c\u00e1c h\u00e0m v\u1ed1n ch\u1ec9 \u0111\u01b0\u1ee3c d\u00f9ng trong n\u1ed9i b\u1ed9 b\u00ean trong smart contract c\u00f3 th\u1ec3 b\u1ecb g\u1ecdi s\u1eed d\u1ee5ng m\u1ed9t c\u00e1ch c\u00f4ng khai b\u1edfi b\u1ea5t k\u1ef3 ai.\n\n```sol\n/*\n * @source: https://github.com/sigp/solidity-security-blog#visibility\n * @author: SigmaPrime \n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract HashForEther {\n\n  function withdrawWinnings() {\n    // Winner if the last 8 hex characters of the address are 0. \n    require(uint32(msg.sender) == 0);\n    _sendWinnings();\n  }\n  \n  function _sendWinnings() {\n    msg.sender.transfer(this.balance);\n  }\n     \n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, b\u1ea5t k\u1ef3 ai c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m `_sendWinnings` \u0111\u1ec3 r\u00fat ETH t\u1eeb h\u1ee3p \u0111\u1ed3ng th\u00f4ng minh m\u00e0 kh\u00f4ng c\u1ea7n ph\u1ea3i t\u1ea1o ra m\u1ed9t \u0111\u1ecba ch\u1ec9 c\u00f3 8 k\u00fd t\u1ef1 cu\u1ed1i l\u00e0 `0`.\n\n\u0110\u1ed1i v\u1edbi c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i, m\u1eb7c d\u00f9 tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb m\u1eb7c \u0111\u1ecbnh c\u1ee7a ch\u00fang l\u00e0 `internal`, vi\u1ec7c khai b\u00e1o tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb m\u1ed9t c\u00e1ch t\u01b0\u1eddng minh c\u00f3 th\u1ec3 gi\u00fap tr\u00e1nh \u0111\u01b0\u1ee3c nh\u1eefng nh\u1ea7m l\u1eabn v\u1ec1 quy\u1ec1n truy c\u1eadp.\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nK\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 0.5.0 @solidity-v0.5.0-breaking-changes, vi\u1ec7c khai b\u00e1o t\u01b0\u1eddng minh tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb cho h\u00e0m l\u00e0 b\u1eaft bu\u1ed9c n\u00ean l\u1ed7 h\u1ed5ng n\u00e0y ch\u1ec9 t\u1ed3n t\u1ea1i \u1edf c\u00e1c phi\u00ean b\u1ea3n tr\u01b0\u1edbc \u0111\u00f3 c\u1ee7a Solidity.\n\nM\u1eb7c d\u00f9 v\u1eady, l\u1eadp tr\u00ecnh vi\u00ean c\u0169ng n\u00ean xem x\u00e9t c\u1ea9n th\u1eadn vi\u1ec7c s\u1eed d\u1ee5ng tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb c\u1ee7a t\u1eebng h\u00e0m. \u0110\u1eb7c bi\u1ec7t l\u00e0 nh\u1eefng h\u00e0m c\u00f3 tr\u1ea1ng th\u00e1i hi\u1ec3n th\u1ecb l\u00e0 `public` ho\u1eb7c `external`.\n\n\u0110\u1ed1i v\u1edbi v\u00ed d\u1ee5 c\u1ee7a smart contract `HashForEther` \u1edf tr\u00ean, c\u00f3 th\u1ec3 th\u00eam v\u00e0o c\u00e1c visibility nh\u01b0 sau:\n\n```sol\n/*\n * @source: https://github.com/sigp/solidity-security-blog#visibility\n * @author: SigmaPrime\n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract HashForEther {\n  \n  function withdrawWinnings() public {\n    // Winner if the last 8 hex characters of the address are 0.\n    require(uint32(msg.sender) == 0);\n    _sendWinnings();\n  }\n  \n  function _sendWinnings() internal {\n     msg.sender.transfer(this.balance);\n  }\n\n}\n```# Integer Overflow/Underflow <integer-overflow-underflow>\n\n## M\u00f4 t\u1ea3\n\nC\u00e1c ki\u1ec3u d\u1eef li\u1ec7u l\u01b0u tr\u1eef s\u1ed1 nguy\u00ean (bao g\u1ed3m c\u00f3 d\u1ea5u v\u00e0 kh\u00f4ng d\u1ea5u) \u1edf trong Solidity c\u00f3 k\u00edch th\u01b0\u1edbc l\u00e0 c\u00e1c l\u0169y th\u1eeba c\u01a1 s\u1ed1 2 t\u1eeb 8 \u0111\u1ebfn 256. Khi th\u1ef1c hi\u1ec7n t\u00ednh to\u00e1n, d\u1eef li\u1ec7u c\u00f3 th\u1ec3 mang gi\u00e1 tr\u1ecb v\u01b0\u1ee3t ra ngo\u00e0i ph\u1ea1m vi l\u01b0u tr\u1eef c\u1ee7a ki\u1ec3u d\u1eef li\u1ec7u. V\u1ea5n \u0111\u1ec1 n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 tr\u00e0n s\u1ed1 (overflow/underflow).\n\nTrong v\u00ed d\u1ee5 d\u01b0\u1edbi, n\u1ebfu ta g\u1ecdi h\u00e0m `run` v\u1edbi `input` l\u00e0 `2` th\u00ec gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn `count` s\u1ebd l\u00e0 $1 -2 = -1 = 2^{256} - 1$ (ki\u1ec3u `uint` th\u1ef1c ch\u1ea5t l\u00e0 `uint256`).\n\n```sol\n//Single transaction overflow\n//Post-transaction effect: overflow escapes to publicly-readable storage\n\npragma solidity ^0.4.19;\n\ncontract IntegerOverflowMinimal {\n  \n    uint public count = 1;\n\n    function run(uint256 input) public {\n        count -= input;\n    }\n    \n}\n```\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nC\u1ea9n th\u1eadn khi th\u1ef1c hi\u1ec7n c\u00e1c t\u00ednh to\u00e1n tr\u00ean s\u1ed1 nguy\u00ean b\u1eb1ng c\u00e1ch so s\u00e1nh c\u00e1c to\u00e1n h\u1ea1ng tr\u01b0\u1edbc khi th\u1ef1c hi\u1ec7n to\u00e1n t\u1eed.\n\nS\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n ch\u1eb3ng h\u1ea1n nh\u01b0 SafeMath c\u1ee7a OpenZeppelin @openzeppelin-math. V\u1ec1 b\u1ea3n ch\u1ea5t, th\u01b0 vi\u1ec7n n\u00e0y s\u1eed d\u1ee5ng c\u00e1c c\u00e2u l\u1ec7nh `assert` ho\u1eb7c `require` \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o c\u00e1c thao t\u00e1c t\u00ednh to\u00e1n s\u1ebd kh\u00f4ng g\u00e2y ra tr\u00e0n s\u1ed1.\n\nNgo\u00e0i ra, k\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 0.8.0 @solidity-v0.8.0-breaking-changes c\u1ee7a Solidity, l\u1ed7i tr\u00e0n s\u1ed1 \u0111\u01b0\u1ee3c t\u1ef1 \u0111\u1ed9ng ph\u00e1t hi\u1ec7n v\u00e0 giao d\u1ecbch s\u1ebd \u0111\u01b0\u1ee3c ho\u00e0n tr\u1ea3 tr\u01b0\u1edbc khi thao t\u00e1c t\u00ednh to\u00e1n \u0111\u01b0\u1ee3c th\u1ef1c thi.\n\n\n\n# Outdated Compiler Version\n\n## M\u00f4 t\u1ea3\n\nS\u1eed d\u1ee5ng m\u1ed9t phi\u00ean b\u1ea3n tr\u00ecnh bi\u00ean d\u1ecbch \u0111\u00e3 c\u0169 c\u00f3 th\u1ec3 g\u00e2y ra c\u00e1c v\u1ea5n \u0111\u1ec1, \u0111\u1eb7c bi\u1ec7t l\u00e0 khi phi\u00ean b\u1ea3n \u0111\u00f3 c\u00f3 c\u00e1c l\u1ed7i v\u00e0 s\u1ef1 c\u1ed1 \u0111\u00e3 \u0111\u01b0\u1ee3c ti\u1ebft l\u1ed9 c\u00f4ng khai.\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nS\u1eed d\u1ee5ng phi\u00ean b\u1ea3n tr\u00ecnh bi\u00ean d\u1ecbch c\u1ee7a Solidity g\u1ea7n \u0111\u00e2y nh\u1ea5t.# Floating Compiler Version\n\n## M\u00f4 t\u1ea3\n\nM\u1ed9t contract c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch b\u1edfi nhi\u1ec1u phi\u00ean b\u1ea3n c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch kh\u00e1c nhau. \n\nV\u00ed d\u1ee5:\n\n```sol\npragma solidity >=0.4.0 < 0.6.0;\npragma solidity >=0.4.0<0.6.0;\npragma solidity >=0.4.14 <0.6.0;\npragma solidity >0.4.13 <0.6.0;\npragma solidity 0.4.24 - 0.5.2;\npragma solidity >=0.4.24 <=0.5.3 ~0.4.20;\npragma solidity <0.4.26;\npragma solidity ~0.4.20;\npragma solidity ^0.4.14;\npragma solidity 0.4.*;\npragma solidity 0.*;\npragma solidity *;\npragma solidity 0.4;\npragma solidity 0;\n\ncontract SemVerFloatingPragma { }\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, smart contract khai b\u00e1o r\u1ea5t nhi\u1ec1u phi\u00ean b\u1ea3n c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch theo ki\u1ec3u SemVer (Semantic Versoning). \u0110i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn vi\u1ec7c phi\u00ean b\u1ea3n \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u00fac ki\u1ec3m th\u1eed v\u00e0 l\u00fac tri\u1ec3n khai smart contract kh\u00e1c nhau. N\u1ebfu smart contract \u0111\u01b0\u1ee3c tri\u1ec3n khai b\u1edfi m\u1ed9t phi\u00ean b\u1ea3n c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch c\u00f3 ch\u1ee9a l\u1ed7i th\u00ec c\u00f3 th\u1ec3 l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn t\u00ednh \u0111\u00fang \u0111\u1eafn c\u1ee7a n\u00f3.\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nC\u1ea7n ph\u1ea3i c\u1ed1 \u0111\u1ecbnh phi\u00ean b\u1ea3n c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho smart contract, v\u00ed d\u1ee5:\n\n```sol\npragma solidity 0.4.25;\n// or\npragma solidity =0.4.25;\n\ncontract SemVerFloatingPragmaFixed { }\n```\n# Unchecked Return Value\n\n## M\u00f4 t\u1ea3\n\nM\u1ed9t smart contract c\u00f3 th\u1ec3 giao ti\u1ebfp v\u1edbi smart contract kh\u00e1c th\u00f4ng qua c\u00e1c c\u00e1ch sau:\n- S\u1eed d\u1ee5ng c\u00e1c h\u00e0m \u1edf m\u1ee9c th\u1ea5p (opcode) ch\u1eb3ng h\u1ea1n nh\u01b0 `call`, `delegatecall` v\u00e0 `staticcall` \u0111\u1ec3 g\u1ecdi h\u00e0m ho\u1eb7c g\u1eedi ETH.\n- S\u1eed d\u1ee5ng h\u00e0m `send` \u0111\u1ec3 g\u1eedi ETH.\n\nN\u1ebfu c\u00f3 ngo\u1ea1i l\u1ec7 x\u1ea3y ra trong smart contract kh\u00e1c th\u00ec c\u00e1c h\u00e0m tr\u00ean s\u1ebd tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb lu\u1eadn l\u00fd cho bi\u1ebft thao t\u00e1c kh\u00f4ng \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n th\u00e0nh c\u00f4ng thay v\u00ec lan truy\u1ec1n ngo\u1ea1i l\u1ec7. N\u1ebfu kh\u00f4ng ki\u1ec3m tra gi\u00e1 tr\u1ecb lu\u1eadn l\u00fd n\u00e0y th\u00ec c\u00f3 th\u1ec3 l\u00e0m \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 th\u1ef1c thi c\u1ee7a smart contract.\n\nV\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi d\u00f9ng h\u00e0m `call` \u0111\u1ec3 g\u1ecdi h\u00e0m `foo` c\u1ee7a smart contract c\u00f3 \u0111\u1ecba ch\u1ec9 l\u00e0 `_addr` v\u1edbi hai \u0111\u1ed1i s\u1ed1 l\u1ea7n l\u01b0\u1ee3t l\u00e0 `\"call foo\"` v\u00e0 `123`:\n\n```sol\ncontract UsingCall {\n  \n  function invokeFunction(address payable _addr) public payable {\n  \t(bool success, bytes memory data) = _addr.call{\n    \tvalue: msg.value,\n    \tgas: 5000\n    }(abi.encodeWithSignature(\"foo(string,uint256)\", \"call foo\", 123));\n  }\n  \n}\n```\n\nN\u1ebfu h\u00e0m `foo` x\u1ea3y ra ngo\u1ea1i l\u1ec7, bi\u1ebfn `success` s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 `false` cho bi\u1ebft vi\u1ec7c g\u1ecdi h\u00e0m th\u1ea5t b\u1ea1i. Tuy nhi\u00ean, vi\u1ec7c x\u1ea3y ra ngo\u1ea1i l\u1ec7 trong m\u1ed9t smart contract kh\u00e1c kh\u00f4ng l\u00e0m d\u1eebng qu\u00e1 tr\u00ecnh th\u1ef1c thi c\u1ee7a contract `UsingCall` c\u0169ng nh\u01b0 l\u00e0 kh\u00f4ng h\u1ee7y b\u1ecf c\u00e1c s\u1ef1 thay \u0111\u1ed5i l\u00ean c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i.\n\nTrong tr\u01b0\u1eddng h\u1ee3p s\u1eed d\u1ee5ng h\u00e0m `send`, ngo\u1ea1i l\u1ec7 c\u00f3 th\u1ec3 x\u1ea3y ra trong (c\u00e1c) h\u00e0m fallback c\u1ee7a smart contract nh\u1eadn ETH m\u1ed9t c\u00e1ch t\u00ecnh c\u1edd ho\u1eb7c c\u00f3 ch\u1ee7 \u0111\u00edch. \n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nLu\u00f4n ki\u1ec3m tra gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn lu\u1eadn l\u00fd \u0111\u01b0\u1ee3c tr\u1ea3 v\u1ec1 t\u1eeb c\u00e1c h\u00e0m d\u00f9ng \u0111\u1ec3 giao ti\u1ebfp v\u1edbi smart contract kh\u00e1c m\u00e0 kh\u00f4ng lan truy\u1ec1n ngo\u1ea1i l\u1ec7.\n\nV\u00ed d\u1ee5:\n\n```sol\npragma solidity 0.4.25;\n\ncontract ReturnValue {\n  \n  function callchecked(address callee) public {\n    require(callee.call());\n  }\n\n  function callnotchecked(address callee) public {\n    callee.call();\n  }\n  \n}\n```\n\n\n# Access Control Management\n\n# M\u00f4 t\u1ea3\n\nVi\u1ec7c kh\u00f4ng ki\u1ec3m so\u00e1t quy\u1ec1n truy c\u1eadp c\u1ee7a h\u00e0m c\u00f3 th\u1ec3 khi\u1ebfn cho b\u1ea5t k\u1ef3 ai kh\u00f4ng c\u00f3 quy\u1ec1n c\u0169ng c\u00f3 th\u1ec3 th\u1ef1c thi h\u00e0m, \u0111\u1eb7c bi\u1ec7t l\u00e0 c\u00e1c h\u00e0m r\u00fat ETH ho\u1eb7c g\u1ecdi c\u00e1c h\u00e0m nguy hi\u1ec3m ch\u1eb3ng h\u1ea1n nh\u01b0 `selfdestruct` #footnote[`selfdestruct` l\u00e0 m\u1ed9t h\u00e0m d\u00f9ng \u0111\u1ec3 x\u00f3a bytecode c\u1ee7a smart contract \u1edf tr\u00ean blockchain v\u00e0 chuy\u1ec3n h\u1ebft ETH c\u00f2n l\u1ea1i trong smart contract \u0111\u1ebfn \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c ch\u1ec9 \u0111\u1ecbnh.].\n\nV\u00ed d\u1ee5:\n\n```sol\npragma solidity ^0.4.22;\n\ncontract SimpleEtherDrain {\n\n  function withdrawAllAnyone() {\n    msg.sender.transfer(this.balance);\n  }\n\n  function () public payable {\n  }\n  \n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, h\u00e0m `withdrawAllAnyone` kh\u00f4ng \u00e1p d\u1ee5ng c\u00e1c bi\u1ec7n ph\u00e1p ki\u1ec3m so\u00e1t quy\u1ec1n truy c\u1eadp n\u00ean b\u1ea5t k\u1ef3 ai c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m v\u00e0 r\u00fat h\u1ebft ETH t\u1eeb smart contract.\n\nM\u1ed9t v\u00ed d\u1ee5 kh\u00e1c:\n\n```sol\npragma solidity ^0.4.22;\n\ncontract SimpleSuicide {\n\n  function sudicideAnyone() {\n    selfdestruct(msg.sender);\n  }\n  \n}\n```\n\nV\u1edbi v\u00ed d\u1ee5 n\u00e0y, do kh\u00f4ng ki\u1ec3m so\u00e1t quy\u1ec1n truy c\u1eadp n\u00ean b\u1ea5t k\u1ef3 ai c\u0169ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m `sudicideAnyone` v\u00e0 r\u00fat h\u1ebft ETH th\u00f4ng qua h\u00e0m `selfdestruct`.\n\n# C\u00e1ch kh\u1eafc ph\u1ee5c\n\nC\u1ea7n gi\u1edbi h\u1ea1n l\u1ea1i quy\u1ec1n truy c\u1eadp c\u1ee7a h\u00e0m cho m\u1ed9t s\u1ed1 \u0111\u1ecba ch\u1ec9 nh\u1ea5t \u0111\u1ecbnh. C\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c bi\u1ec7n ph\u00e1p ki\u1ec3m so\u00e1t quy\u1ec1n truy c\u1eadp ch\u1eb3ng h\u1ea1n nh\u01b0 smart contract Ownable c\u1ee7a OpenZeppelin @openzeppelin-ownership.\n\nV\u00ed d\u1ee5:\n\n```sol\nimport \"./Ownable.sol\"\n\ncontract MyContract is Ownable {\n  INumberInterface numberContract;\n  \n  function setNumberContractAddress(address _address) external onlyOwner {\n    numberContract = INumberInterface(_address);\n  }\n  \n  function someFunction() public {\n    uint num = numberContract.getNum(msg.sender);\n  }\n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, `onlyOwner` l\u00e0 m\u1ed9t modifier gi\u00fap gi\u1edbi h\u1ea1n quy\u1ec1n truy c\u1eadp \u0111\u1ebfn h\u00e0m. C\u1ee5 th\u1ec3, n\u00f3 ng\u0103n kh\u00f4ng cho c\u00e1c \u0111\u1ecba ch\u1ec9 kh\u00f4ng ph\u1ea3i l\u00e0 ch\u1ee7 s\u1edf h\u1eefu smart contract th\u1ef1c thi h\u00e0m.\n\nC\u00e2n nh\u1eafc kh\u00f4ng d\u00f9ng h\u00e0m `selfdestruct` trong smart contract ho\u1eb7c n\u1ebfu c\u00f3 d\u00f9ng th\u00ec s\u1eed d\u1ee5ng m\u00f4 h\u00ecnh \u0111a ch\u1eef k\u00fd \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng c\u00f3 nhi\u1ec1u t\u1ed5 ch\u1ee9c \u0111\u1ed3ng thu\u1eadn v\u1edbi vi\u1ec7c x\u00f3a bytecode c\u1ee7a smart contract.\n\nNgo\u00e0i ra, k\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 0.8.18 @eip-4758, Solidity kh\u00f4ng c\u00f2n h\u1ed7 tr\u1ee3 h\u00e0m `selfdestruct`.\n\n\n# Re-entrancy <re-entrancy>\n\n## M\u00f4 t\u1ea3 <re-entrancy-description>\n\nL\u00e0 m\u1ed9t ki\u1ec3u t\u1ea5n c\u00f4ng \u0111\u1ec7 quy t\u01b0\u01a1ng h\u1ed7 x\u1ea3y ra gi\u1eefa smart contract c\u1ee7a n\u1ea1n nh\u00e2n v\u00e0 smart contract c\u1ee7a k\u1ebb t\u1ea5n c\u00f4ng. C\u1ee5 th\u1ec3 h\u01a1n, k\u1ebb t\u1ea5n c\u00f4ng s\u1ebd li\u00ean t\u1ee5c g\u1ecdi l\u1ea1i m\u1ed9t h\u00e0m trong smart contract c\u1ee7a n\u1ea1n nh\u00e2n tr\u01b0\u1edbc khi l\u1eddi g\u1ecdi tr\u01b0\u1edbc \u0111\u00f3 \u0111\u01b0\u1ee3c th\u1ef1c thi xong.\n\nV\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi l\u00e0 phi\u00ean b\u1ea3n \u0111\u01a1n gi\u1ea3n c\u1ee7a smart contract \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 v\u1eadn h\u00e0nh DAO #footnote[DAO (Decentralized Autonomous Organizations) l\u00e0 m\u1ed9t t\u1eadp c\u00e1c smart contract ho\u1ea1t \u0111\u1ed9ng nh\u01b0 m\u1ed9t qu\u1ef9 \u0111\u1ea7u t\u01b0 t\u1ef1 \u0111\u1ed9ng.]:\n\n```sol\n/*\n * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#simpledao\n * @author: Atzei N., Bartoletti M., Cimoli T\n * Modified by Josselin Feist\n */\npragma solidity 0.4.24;\n\ncontract SimpleDAO {\n  \n  mapping (address => uint) public credit;\n\n  function donate(address to) payable public{\n    credit[to] += msg.value;\n  }\n\n  function withdraw(uint amount) public {\n    if (credit[msg.sender]>= amount) {\n      require(msg.sender.call.value(amount)());\n      credit[msg.sender]-=amount;\n    }\n  }  \n\n  function queryCredit(address to) view public returns(uint){\n    return credit[to];\n  }\n  \n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, smart contract cho ph\u00e9p quy\u00ean g\u00f3p m\u1ed9t l\u01b0\u1ee3ng `msg.value` wei \u0111\u1ebfn cho \u0111\u1ecba ch\u1ec9 `to` th\u00f4ng qua h\u00e0m `donate`. \u0110\u1ec3 r\u00fat ETH, ng\u01b0\u1eddi d\u00f9ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m `withdraw` v\u00e0 truy\u1ec1n v\u00e0o tham s\u1ed1 `amount` l\u01b0\u1ee3ng ETH c\u1ea7n r\u00fat.\n\nK\u1ebb t\u1ea5n c\u00f4ng c\u00f3 th\u1ec3 x\u00e2y d\u1ef1ng m\u1ed9t smart contract d\u00f9ng \u0111\u1ec3 t\u1ea5n c\u00f4ng nh\u01b0 sau:\n\n```sol\npragma solidity 0.4.24;\n\ncontract Attacker {\n  \n  SimpleDAO public simpleDAO;\n\n  constructor(address _simpleDAOAddress) {\n    simpleDAO = SimpleDAO(_simpleDAOAddress);\n  }\n\n  function attack() {\n    simpleDAO.donate.value(1)(this);\n    simpleDAO.withdraw(1 ether);\n  }\n  \n  function() {\n    simpleDAO.withdraw(1 ether);\n  }\n  \n}\n```\n\nKhi k\u1ebb t\u1ea5n c\u00f4ng g\u1ecdi h\u00e0m `attack`, smart contract `Attacker` s\u1ebd chuy\u1ec3n 1 ETH \u0111\u1ebfn cho `SimpleDAO` th\u00f4ng qua h\u00e0m `donate` v\u1edbi \u0111\u1ed1i s\u1ed1 c\u1ee7a `to` l\u00e0 \u0111\u1ecba ch\u1ec9 c\u1ee7a `Attacker`. Sau \u0111\u00f3, h\u00e0m `attack` g\u1ecdi \u0111\u1ebfn h\u00e0m `withdraw` c\u1ee7a `SimpleDAO` v\u1edbi \u0111\u1ed1i s\u1ed1 c\u1ee7a `amount` l\u00e0 1 ETH.\n\nL\u00fac n\u00e0y, h\u00e0m `withdraw` c\u1ee7a `SimpleDAO` s\u1ebd g\u1ecdi l\u1ea1i h\u00e0m fallback c\u1ee7a `Attacker`. Tuy nhi\u00ean, h\u00e0m fallback c\u1ee7a `Attacker` l\u1ea1i g\u1ecdi \u0111\u1ebfn h\u00e0m `withdraw` c\u1ee7a `SimpleDAO`. Vi\u1ec7c g\u1ecdi h\u00e0m n\u00e0y ng\u0103n cho bi\u1ebfn tr\u1ea1ng th\u00e1i `credit[msg.sender]` b\u1ecb gi\u1ea3m gi\u00e1 tr\u1ecb v\u00e0 d\u1eabn \u0111\u1ebfn \u0111i\u1ec1u ki\u1ec7n `if (credit[msg.sender]>= amount)` l\u00e0 lu\u00f4n \u0111\u00fang \u0111\u1ed1i v\u1edbi c\u00e1c l\u1eddi g\u1ecdi \u0111\u1ec7 quy sau.\n\nVi\u1ec7c g\u1ecdi \u0111\u1ec7 quy s\u1ebd ti\u1ebfp di\u1ec5n \u0111\u1ebfn khi:\n1. X\u1ea3y ra ngo\u1ea1i l\u1ec7 h\u1ebft gas (out-of-gas exception).\n2. Ch\u1ea1m \u0111\u1ebfn gi\u1edbi h\u1ea1n c\u1ee7a stack.\n3. Smart contract `SimpleDAO` kh\u00f4ng c\u00f2n ETH n\u00e0o.\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c <re-entrancy-remediation>\n\nS\u1eed d\u1ee5ng c\u00e1c m\u1eabu b\u1ea3o m\u1eadt ch\u1eb3ng h\u1ea1n nh\u01b0 Check-Effect-Interaction ho\u1eb7c Mutex @wohrer_2018_smart.\n\nM\u1eabu b\u1ea3o m\u1eadt Check-Effect-Interaction x\u1ebfp l\u1eddi g\u1ecdi \u0111\u1ebfn smart contract kh\u00e1c \u1edf cu\u1ed1i v\u00e0 sau khi c\u1eadp nh\u1eadt bi\u1ebfn tr\u1ea1ng th\u00e1i. \n\nV\u00ed d\u1ee5:\n\n```sol\npragma solidity 0.4.24;\n\ncontract SimpleDAO {\n  \n  mapping (address => uint) public credit;\n\n  function donate(address to) payable public{\n    credit[to] += msg.value;\n  }\n\n  function withdraw(uint amount) public {\n    // 1. Check\n    if (credit[msg.sender]>= amount) {\n      // 2. Effect\n      credit[msg.sender]-=amount;\n      // 3. Interaction\n      require(msg.sender.call.value(amount)());\n    }\n  }  \n\n  function queryCredit(address to) view public returns(uint){\n    return credit[to];\n  }\n  \n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, bi\u1ebfn tr\u1ea1ng th\u00e1i `credit` \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt tr\u01b0\u1edbc khi h\u00e0m `call` \u0111\u01b0\u1ee3c th\u1ef1c thi.\n\nNgo\u00e0i ra, c\u0169ng c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng smart contract ReentrancyGuard c\u1ee7a OpenZeppelin @openzeppelin-reentrancy-guard \u0111\u1ec3 ng\u0103n ch\u1eb7n c\u00e1c l\u1eddi g\u1ecdi \u0111\u1ec7 quy. C\u1ee5 th\u1ec3, smart contract n\u00e0y cung c\u1ea5p modifier `nonReentrant` \u0111\u1ec3 ng\u0103n c\u1ea3n m\u1ed9t smart contract g\u1ecdi l\u1ea1i ch\u00ednh n\u00f3 m\u1ed9t c\u00e1ch tr\u1ef1c ti\u1ebfp ho\u1eb7c gi\u00e1n ti\u1ebfp.\n# Uninitialized Storage Pointer\n\n## B\u1ed1 c\u1ee5c l\u01b0u tr\u1eef c\u1ee7a Solidity <storage-layout>\n\nTr\u01b0\u1edbc khi ph\u00e2n t\u00edch l\u1ed7 h\u1ed5ng, ta c\u1ea7n hi\u1ec3u v\u1ec1 c\u00e1ch Solidity l\u01b0u c\u00e1c bi\u1ebfn `storage`. N\u00f3i m\u1ed9t c\u00e1ch \u0111\u01a1n gi\u1ea3n, c\u00e1c bi\u1ebfn `storage` \u0111\u01b0\u1ee3c Solidity l\u01b0u li\u00ean ti\u1ebfp \u1edf trong c\u00e1c khe l\u01b0u tr\u1eef (slot). C\u00f3 t\u1ed5ng c\u1ed9ng $2^{256}$ khe l\u01b0u tr\u1eef, m\u1ed7i khe l\u01b0u tr\u1eef c\u00f3 k\u00edch th\u01b0\u1edbc 32 byte v\u00e0 \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 t\u1eeb 0 \u0111\u1ebfn $2^{256} - 1$ @voitier_2023_exploring-the-storage-layout-in-solidity-and-how-to-access-state-variables, @a2018_understanding-ethereum-smart-contract-storage. \n\nX\u00e9t v\u00ed d\u1ee5 sau:\n\n```sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ncontract StorageLayout {\n  uint256 x = 1; // slot 0\n  uint256 y = 2; // slot 1\n  uint256 z = 3; // slot 2\n}\n```\n\nDo m\u1ed7i bi\u1ebfn `x`, `y` v\u00e0 `z` \u0111\u1ec1u c\u00f3 k\u00edch th\u01b0\u1edbc l\u00e0 32 byte n\u00ean ch\u00fang \u0111\u01b0\u1ee3c l\u01b0u trong t\u1eebng slot ri\u00eang bi\u1ec7t. \n\nTrong tr\u01b0\u1eddng h\u1ee3p k\u00edch th\u01b0\u1edbc c\u1ee7a c\u00e1c bi\u1ebfn l\u00e0 nh\u1ecf v\u00e0 v\u1eeba \u0111\u1ee7 m\u1ed9t slot, ch\u00fang s\u1ebd \u0111\u01b0\u1ee3c \u0111\u1eb7t c\u1ea1nh nhau. V\u00ed d\u1ee5:\n\n```sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\n// contract address: 0xeBa088B4182EC4261FA4fd2526F58995Dc1Ec117\n\ncontract StorageLayout {\n    uint16 x = 1;\n    uint16 y = 2;\n    uint16 z = 3;\n}\n```\n\nKhi d\u00f9ng h\u00e0m `web3.eth.getStorageAt(contractAddress, slotPosition)` c\u1ee7a th\u01b0 vi\u1ec7n web3.js \u0111\u1ec3 truy v\u1ea5n gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c l\u01b0u \u1edf slot 0, ta thu \u0111\u01b0\u1ee3c gi\u00e1 tr\u1ecb sau:\n\n```sol\nslot[0] = 0x0000000000000000000000000000000000000000000000000000000300020001\n```\n\nC\u00f3 th\u1ec3 th\u1ea5y, ba bi\u1ebfn `x`, `y` v\u00e0 `z` \u0111\u01b0\u1ee3c \u0111\u1eb7t c\u1ea1nh nhau. Ngo\u00e0i ra, gi\u00e1 tr\u1ecb l\u01b0u \u1edf slot 0 c\u0169ng \u0111\u01b0\u1ee3c ABI-encode @abi-specification b\u1eb1ng c\u00e1ch \u0111\u1ec7m th\u00eam c\u00e1c s\u1ed1 0.\n\nTrong tr\u01b0\u1eddng h\u1ee3p c\u00e1c bi\u1ebfn kh\u00f4ng th\u1ec3 l\u01b0u v\u1eeba trong m\u1ed9t slot, ch\u00fang s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u v\u00e0o nhi\u1ec1u slot. V\u00ed d\u1ee5:\n\n```sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ncontract StorageLayout {\n    uint16 x = 1;\n    uint256 y = 2;\n    uint16 z = 3;\n}\n```\n\nGi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn l\u01b0u trong c\u00e1c slot l\u00e0:\n\n```sol\nslot[0] = 0x0000000000000000000000000000000000000000000000000000000000000001\nslot[1] = 0x0000000000000000000000000000000000000000000000000000000000000002\nslot[2] = 0x0000000000000000000000000000000000000000000000000000000000000003\n```\n\n## M\u00f4 t\u1ea3\n\nC\u00e1c bi\u1ebfn c\u1ee5c b\u1ed9 c\u00f3 v\u1ecb tr\u00ed d\u1eef li\u1ec7u (data location) l\u00e0 `storage` b\u00ean trong h\u00e0m n\u1ebfu kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o c\u00f3 th\u1ec3 tr\u1ecf \u0111\u1ebfn c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i c\u00f3 v\u1ecb tr\u00ed d\u1eef li\u1ec7u l\u00e0 `storage` trong smart contract. \u0110i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn vi\u1ec7c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i b\u1ecb s\u1eeda \u0111\u1ed5i th\u00f4ng qua c\u00e1c bi\u1ebfn c\u1ee5c b\u1ed9. \n\nX\u00e9t smart contract sau:\n\n```sol\n// A Locked Name Registrar\ncontract NameRegistrar {\n\n  bool public unlocked = false;  // registrar locked, no name updates\n  \n  struct NameRecord { // map hashes to addresses\n    bytes32 name;\n    address mappedAddress;\n  }\n  \n  mapping(address => NameRecord) public registeredNameRecord; // records who registered names\n  mapping(bytes32 => address) public resolve; // resolves hashes to addresses\n  \n  function register(bytes32 _name, address _mappedAddress) public {\n    // set up the new NameRecord\n    NameRecord newRecord;\n    newRecord.name = _name;\n    newRecord.mappedAddress = _mappedAddress;\n    \n    resolve[_name] = _mappedAddress;\n    registeredNameRecord[msg.sender] = newRecord;\n    \n    require(unlocked); // only allow registrations if contract is unlocked\n  }\n}\n```\n\nSmart contract n\u00e0y c\u00f3 duy nh\u1ea5t m\u1ed9t h\u00e0m l\u00e0 `register`. Khi bi\u1ebfn tr\u1ea1ng th\u00e1i `unlocked` c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 `true`, smart contract cho ph\u00e9p ng\u01b0\u1eddi d\u00f9ng \u0111\u0103ng k\u00fd t\u00ean v\u00e0 \u0111\u1ecba ch\u1ec9 t\u01b0\u01a1ng \u1ee9ng v\u1edbi t\u00ean \u0111\u00f3 v\u00e0o mapping `registeredNameRecord`. C\u00e2u l\u1ec7nh `require` \u1edf cu\u1ed1i h\u00e0m gi\u00fap ho\u00e0n tr\u1ea3 giao d\u1ecbch n\u1ebfu `unlocked` c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 `false`.\n\nD\u1ef1a tr\u00ean c\u01a1 ch\u1ebf l\u01b0u c\u00e1c bi\u1ebfn `storage` c\u1ee7a Solidity th\u00ec slot 0 s\u1ebd l\u01b0u bi\u1ebfn `unlocked`, slot 1 l\u01b0u bi\u1ebfn `registeredNameRecord` v\u00e0 slot 2 l\u01b0u bi\u1ebfn `resolve` #footnote[Ta b\u1ecf qua vi\u1ec7c mapping kh\u00f4ng th\u1ef1c s\u1ef1 \u0111\u01b0\u1ee3c l\u01b0u \u1edf m\u1ed9t slot m\u00e0 thay v\u00e0o \u0111\u00f3 l\u00e0 c\u00e1c ph\u1ea7n t\u1eed c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c l\u01b0u \u1edf c\u00e1c slot kh\u00f4ng li\u1ec1n k\u1ec1 nhau.].\n\nNh\u01b0 \u0111\u00e3 bi\u1ebft, v\u1ecb tr\u00ed d\u1eef li\u1ec7u m\u1eb7c \u0111\u1ecbnh cho c\u00e1c bi\u1ebfn c\u00f3 ki\u1ec3u tham chi\u1ebfu ch\u1eb3ng h\u1ea1n nh\u01b0 struct, m\u1ea3ng ho\u1eb7c mapping l\u00e0 `storage`. Vi\u1ec7c kh\u00f4ng khai b\u00e1o v\u1ecb tr\u00ed d\u1eef li\u1ec7u cho bi\u1ebfn `newRecord` b\u00ean trong h\u00e0m `register` l\u00e0m cho n\u00f3 c\u00f3 v\u1ecb tr\u00ed d\u1eef li\u1ec7u l\u00e0 `storage`. Do l\u00e0 m\u1ed9t bi\u1ebfn `storage` v\u00e0 kh\u00f4ng \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o, `newRecord` s\u1ebd \u0111\u00f3ng vai tr\u00f2 l\u00e0 m\u1ed9t con tr\u1ecf v\u00e0 tr\u1ecf \u0111\u1ebfn slot 0. \n\nC\u1ee5 th\u1ec3 h\u01a1n, tr\u01b0\u1eddng `name` v\u00e0 `mappedAddress` s\u1ebd l\u1ea7n l\u01b0\u1ee3t tr\u1ecf \u0111\u1ebfn bi\u1ebfn `unlocked` v\u00e0 bi\u1ebfn `registeredNameRecord`. Vi\u1ec7c g\u00e1n gi\u00e1 tr\u1ecb cho tr\u01b0\u1eddng `name` khi \u0111\u00f3 c\u0169ng s\u1ebd l\u00e0m thay \u0111\u1ed5i gi\u00e1 tr\u1ecb c\u1ee7a bi\u1ebfn `unlocked`. B\u1eb1ng c\u00e1ch ch\u1ecdn gi\u00e1 tr\u1ecb `_name` sao cho c\u00f3 bit cu\u1ed1i l\u00e0 1, k\u1ebb t\u1ea5n c\u00f4ng c\u00f3 th\u1ec3 g\u1ecdi th\u1ef1c thi h\u00e0m `register` \u0111\u1ec3 thay \u0111\u1ed5i bi\u1ebfn `unlocked` th\u00e0nh `true`.\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nKi\u1ec3m tra xem bi\u1ebfn c\u1ee5c b\u1ed9 thu\u1ed9c ki\u1ec3u tham chi\u1ebfu c\u00f3 nh\u1ea5t thi\u1ebft ph\u1ea3i l\u00e0 `storage` hay kh\u00f4ng (th\u01b0\u1eddng l\u00e0 kh\u00f4ng v\u00ec \u0111i\u1ec1u n\u00e0y l\u00e0m t\u0103ng chi ph\u00ed th\u1ef1c hi\u1ec7n smart contract do vi\u1ec7c ghi v\u00e0o bi\u1ebfn `storage` ti\u00eau th\u1ee5 r\u1ea5t nhi\u1ec1u gas). N\u1ebfu c\u1ea7n thi\u1ebft th\u00ec n\u00ean khai b\u00e1o v\u1ecb tr\u00ed d\u1eef li\u1ec7u t\u01b0\u1eddng minh l\u00e0 `storage`. N\u1ebfu kh\u00f4ng th\u00ec n\u00ean s\u1eed d\u1ee5ng v\u1ecb tr\u00ed d\u1eef li\u1ec7u l\u00e0 `memory`.\n\nK\u1ec3 t\u1eeb phi\u00ean b\u1ea3n 0.5.0, v\u1ea5n \u0111\u1ec1 n\u00e0y \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3i quy\u1ebft do c\u00e1c bi\u1ebfn `storage` ch\u01b0a \u0111\u01b0\u1ee3c kh\u1edfi t\u1ea1o s\u1ebd kh\u00f4ng \u0111\u01b0\u1ee3c bi\u00ean d\u1ecbch.\n\n\n# Use of Deprecated Solidity Functions\n\n## M\u00f4 t\u1ea3\n\nV\u1edbi c\u00e1c phi\u00ean b\u1ea3n m\u1edbi c\u1ee7a tr\u00ecnh bi\u00ean d\u1ecbch, vi\u1ec7c s\u1eed d\u1ee5ng c\u00e1c \u0111\u1ecbnh danh (identifier) c\u0169 \u0111\u00e3 b\u1ecb lo\u1ea1i b\u1ecf c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn c\u00e1c l\u1ed7i bi\u00ean d\u1ecbch ho\u1eb7c c\u00e1c h\u00e0nh vi kh\u00f4ng mong mu\u1ed1n.\n\nV\u00ed d\u1ee5 b\u00ean d\u01b0\u1edbi c\u00f3 ch\u1ee9a c\u00e1c \u0111\u1ecbnh danh c\u0169 kh\u00f4ng c\u00f2n s\u1eed d\u1ee5ng trong c\u00e1c phi\u00ean b\u1ea3n tr\u00ecnh bi\u00ean d\u1ecbch sau n\u00e0y:\n\n```sol\ncontract DeprecatedSimple {\n\n  function DeprecatedSimple() public { }\n\n  function useDeprecated() public constant {\n    bytes32 blockhash = block.blockhash(0);\n    bytes32 hashofhash = sha3(blockhash);\n\n    uint gas = msg.gas;\n\n    if (gas == 0) {\n      throw;\n    }\n\n    address(this).callcode();\n\n    var a = [1,2,3];\n\n    var (x, y, z) = (false, \"test\", 0);\n\n    suicide(address(0));\n  }\n\n  function () public {}\n}\n```\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nS\u1eed d\u1ee5ng c\u00e1c \u0111\u1ecbnh danh thay th\u1ebf trong smart contract.\n\n#figure(\n  table(\n    columns: (auto, auto),\n    align: horizon,\n    table.header(\"C\u0169\", \"Thay th\u1ebf\"),\n    `suicide(address)`, `selfdestruct(address)`,\n    `block.blockhash(uint)`,\t`blockhash(uint)`,\n    `sha3(...)`, `keccak256(...)`,\n    `callcode(...)`, `delegatecall(...)`,\n    `throw`,\t`revert()`,\n    `msg.gas`,\t`gasleft`,\n    `constant`,\t`view`,\n    `var`,\t[t\u00ean ki\u1ec3u d\u1eef li\u1ec7u t\u01b0\u01a1ng \u1ee9ng],\n    [`function ()`], [`receive()` ho\u1eb7c `fallback()`],\n    [H\u00e0m t\u1ea1o tr\u00f9ng t\u00ean v\u1edbi smart contract], `constructor()`\n  ),\n  caption: [C\u00e1c \u0111\u1ecbnh danh c\u0169 v\u00e0 \u0111\u1ecbnh danh thay th\u1ebf t\u01b0\u01a1ng \u1ee9ng]\n)\n\n\u0110\u1ed1i v\u1edbi v\u00ed d\u1ee5 c\u1ee7a smart contract `DeprecatedSimple` \u1edf tr\u00ean, c\u00f3 th\u1ec3 s\u1eeda l\u1ea1i nh\u01b0 sau:\n\n```sol\ncontract DeprecatedSimpleFixed {\n\n  constructor() { }\n  \n  function useDeprecatedFixed() public view {\n    bytes32 bhash = blockhash(0);\n    bytes32 hashofhash = keccak256(bhash);\n\n    uint gas = gasleft();\n\n    if (gas == 0) {\n      revert();\n    }\n\n    address(this).delegatecall();\n\n    uint8[3] memory a = [1,2,3];\n\n    (bool x, string memory y, uint8 z) = (false, \"test\", 0);\n\n    selfdestruct(address(0));\n  }\n\n  receive() external payable { }\n\n}\n```# Delegatecall to Untrusted Callee\n\n## H\u00e0m `delegatecall`\n\nL\u00e0 m\u1ed9t h\u00e0m low-level t\u01b0\u01a1ng t\u1ef1 v\u1edbi h\u00e0m `call` (\u0111\u1ec1u \u0111\u01b0\u1ee3c d\u00f9ng \u0111\u1ec3 g\u1ecdi h\u00e0m c\u1ee7a smart contract kh\u00e1c ho\u1eb7c g\u1eedi ETH \u0111\u1ebfn smart contract kh\u00e1c). \n\nTuy nhi\u00ean, khi m\u1ed9t smart contract A g\u1ecdi th\u1ef1c thi h\u00e0m c\u1ee7a smart contract B b\u1eb1ng `delegatecall`, h\u00e0m c\u1ee7a smart contract B s\u1ebd th\u1ef1c thi v\u1edbi c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i c\u1ee7a smart contract A.\n\nV\u00ed d\u1ee5:\n\n```sol\n// NOTE: Deploy this contract first\ncontract B {\n  \n    // NOTE: storage layout must be the same as contract A\n    uint256 public num;\n    address public sender;\n    uint256 public value;\n\n    function setVars(uint256 _num) public payable {\n      num = _num;\n      sender = msg.sender;\n      value = msg.value;\n    }\n    \n}\n\ncontract A {\n  \n    uint256 public num;\n    address public sender;\n    uint256 public value;\n\n    function setVars(address _contract, uint256 _num) public payable {\n      // A's storage is set, B is not modified.\n      (bool success, bytes memory data) = _contract.delegatecall(\n          abi.encodeWithSignature(\"setVars(uint256)\", _num)\n      );\n    }\n    \n}\n```\n\nTrong v\u00ed d\u1ee5 tr\u00ean, h\u00e0m `setVars(address,uint256)` c\u1ee7a smart contract `A` g\u1ecdi th\u1ef1c thi h\u00e0m `setVars(uint256)` c\u1ee7a smart contract `B` th\u00f4ng qua h\u00e0m `delegatecall`.\n\nTa g\u1ecdi th\u1ef1c thi h\u00e0m `setVars(address,uint256)` v\u1edbi c\u00e1c \u0111\u1ed1i s\u1ed1 l\u1ea7n l\u01b0\u1ee3t l\u00e0:\n- \u0110\u1ecba ch\u1ec9 c\u1ee7a contract `B` (`0xd2184e03fC9a5deB782691e41fAB0Ba77F52202e`)\n- Gi\u00e1 tr\u1ecb `1`\n\nSau khi th\u1ef1c thi, gi\u00e1 tr\u1ecb c\u1ee7a hai bi\u1ebfn `num` v\u00e0 `sender` c\u1ee7a smart contract `A` s\u1ebd b\u1ecb thay \u0111\u1ed5i. C\u1ee5 th\u1ec3:\n- `num` b\u1ecb thay \u0111\u1ed5i th\u00e0nh `1`.\n- `sender` b\u1ecb thay \u0111\u1ed5i th\u00e0nh \u0111\u1ecba ch\u1ec9 g\u1ecdi h\u00e0m `setVars`.\n\n## M\u00f4 t\u1ea3\n\nVi\u1ec7c s\u1eed d\u1ee5ng h\u00e0m `delegatecall` \u0111\u1ec3 g\u1ecdi h\u00e0m c\u1ee7a c\u00e1c smart contract kh\u00f4ng tin c\u1eady l\u00e0 r\u1ea5t nguy hi\u1ec3m b\u1edfi v\u00ec c\u00e1c smart contract n\u00e0y c\u00f3 th\u1ec3 thay \u0111\u1ed5i c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c bi\u1ebfn tr\u1ea1ng th\u00e1i ho\u1eb7c chi\u1ebfm quy\u1ec1n s\u1edf h\u1eefu c\u1ee7a smart contract hi\u1ec7n t\u1ea1i.\n\nV\u00ed d\u1ee5, cho smart contract `Proxy` nh\u01b0 sau:\n\n```sol\ncontract Proxy {\n\n  address owner;\n\n  constructor() {\n    owner = msg.sender;  \n  }\n\n  function getOwner() public view returns (address) {\n    return owner;\n  }\n\n  function forward(address callee, bytes memory _data) public {\n    (bool success, ) = callee.delegatecall(_data);\n    require(success);\n  }\n\n}\n```\n\nH\u00e0m `forward` s\u1ebd g\u1ecdi \u0111\u1ebfn h\u00e0m c\u1ee7a smart contract c\u00f3 \u0111\u1ecba ch\u1ec9 l\u00e0 `callee` th\u00f4ng qua h\u00e0m `delegatecall`. K\u1ebb t\u1ea5n c\u00f4ng c\u00f3 th\u1ec3 x\u00e2y d\u1ef1ng m\u1ed9t smart contract nh\u01b0 sau \u0111\u1ec3 t\u1ea5n c\u00f4ng:\n\n```sol\ncontract Attacker {\n    \n  address owner;\n\n  fallback() external { \n    owner = 0xB514b2e847116c7B57e0BFac3a180eB049cd395c;\n  }\n\n}\n```\n\nV\u1edbi `0xB514b2e847116c7B57e0BFac3a180eB049cd395c` l\u00e0 m\u1ed9t \u0111\u1ecba ch\u1ec9 m\u00e0 k\u1ebb t\u1ea5n c\u00f4ng s\u1edf h\u1eefu.\n\nK\u1ebb t\u1ea5n c\u00f4ng c\u00f3 th\u1ec3 g\u1ecdi h\u00e0m `forward` v\u1edbi:\n- \u0110\u1ed1i s\u1ed1 c\u1ee7a `callee` l\u00e0 \u0111\u1ecba ch\u1ec9 c\u1ee7a smart contract `Attacker` (gi\u1ea3 s\u1eed l\u00e0 `0xaB35F973D99176552d49030c65B6cB4A82F9254e`).\n- \u0110\u1ed1i s\u1ed1 c\u1ee7a `_data` l\u00e0 gi\u00e1 tr\u1ecb r\u1ed7ng ch\u1eb3ng h\u1ea1n nh\u01b0 `0x00000000000000000000000000000000` nh\u1eb1m g\u1ecdi h\u00e0m `fallback` c\u1ee7a smart contract `Attacker`.\n\nSau khi th\u1ef1c thi, gi\u00e1 tr\u1ecb c\u1ee7a `owner` trong smart contract `Proxy` s\u1ebd l\u00e0: `0xB514b2e847116c7B57e0BFac3a180eB049cd395c`\n\n## C\u00e1ch kh\u1eafc ph\u1ee5c\n\nC\u1ea7n \u0111\u1ea3m b\u1ea3o r\u1eb1ng h\u00e0m `delegatecall` kh\u00f4ng bao gi\u1edd g\u1ecdi \u0111\u1ebfn c\u00e1c smart contract kh\u00f4ng tin c\u1eady. N\u1ebfu \u0111\u1ecba ch\u1ec9 c\u1ee7a smart contract \u0111\u01b0\u1ee3c g\u1ecdi h\u00e0m l\u00e0 gi\u00e1 tr\u1ecb truy\u1ec1n v\u00e0o c\u1ee7a ng\u01b0\u1eddi d\u00f9ng th\u00ec c\u1ea7n \u0111\u1ea3m b\u1ea3o \u0111\u1ecba ch\u1ec9 n\u00e0y n\u1eb1m trong m\u1ed9t danh s\u00e1ch c\u00e1c \u0111\u1ecba ch\u1ec9 \u0111\u01b0\u1ee3c ph\u00e9p s\u1eed d\u1ee5ng (whitelist).\n\n",
  "vuln_id": "hiding-malicious-code-with-external-contract"
}